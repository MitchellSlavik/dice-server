var DiceClient=function(r){"use strict";const u="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";let c=(l=21)=>{let s="",e=crypto.getRandomValues(new Uint8Array(l));for(;l--;)s+=u[e[l]&63];return s};const a=[1],o=(l,...s)=>l&&console.debug("[DC Debug]:",...s),R={type:"Pong"};class p{constructor(s={},e=!1){this.webSocketReady=!1,this.pendingRollRequests={},this.debug=e,this.eventCallbacks=s}connect(s){this.disconnect(),this.webSocket=new WebSocket(s),this.webSocket.onopen=()=>{var e,t;this.webSocketReady=!0,(t=(e=this.eventCallbacks).onOpen)==null||t.call(e)},this.webSocket.onmessage=e=>{var n,i,d,h;let t=JSON.parse(e.data.toString());switch(o(this.debug,"Received message",t),t.type){case"ServerVersion":{a.includes(t.version)||(o(!0,"Unsupported server version! Supported versions are",a,"Closing connection."),(i=(n=this.eventCallbacks).onError)==null||i.call(n,new Error("Unsupported server version")),this.disconnect());break}case"SupportedDice":{this.supportedDice=t.dice,(h=(d=this.eventCallbacks).onSupportedDiceUpdated)==null||h.call(d,t.dice);break}case"RollResponse":{this.handleRollResponse(t.id,t.rolls);break}case"Ping":{this.send(R);break}}},this.webSocket.onclose=()=>{var e,t;this.webSocketReady=!1,(t=(e=this.eventCallbacks).onClose)==null||t.call(e),o(this.debug,"Connection closed")}}disconnect(){this.webSocket&&(this.webSocketReady=!1,this.webSocket.close(),this.webSocket.onclose=null,this.webSocket.onmessage=null,this.webSocket.onopen=null,this.webSocket=void 0)}requestRoll(s){let e=c();for(;this.pendingRollRequests[e];)e=c();return this.send({type:"RollRequest",id:e,rolls:s}),this.pendingRollRequests[e]={},e}requestRollPromise(s){let e=c();for(;this.pendingRollRequests[e];)e=c();return this.send({type:"RollRequest",id:e,rolls:s}),{rollId:e,promise:new Promise(t=>{this.pendingRollRequests[e]={resolve:t}})}}cancelRollRequest(s){var t,n;if(!this.pendingRollRequests[s]){o(this.debug,`Got a cancel roll request but the roll request was not found ${s}`);return}const e=this.pendingRollRequests[s];e.resolve?e.resolve({completedRolls:[],cancelled:!0}):(n=(t=this.eventCallbacks).onRollCancelled)==null||n.call(t,s),delete this.pendingRollRequests[s],this.send({type:"CancelRollRequest",id:s})}send(s){if(!this.webSocket){o(this.debug,`Attempted to send a '${s.type}' message but the websocket is not connected.`);return}this.webSocket.send(JSON.stringify(s))}handleRollResponse(s,e){var n,i;if(!this.pendingRollRequests[s]){o(this.debug,`Got a roll response that wasn't requested or was cancelled ${s}`);return}const t=this.pendingRollRequests[s];t.resolve?t.resolve({completedRolls:e,cancelled:!1}):(i=(n=this.eventCallbacks).onRollResponse)==null||i.call(n,s,e),delete this.pendingRollRequests[s]}}return r.DiceClient=p,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),r}({});
