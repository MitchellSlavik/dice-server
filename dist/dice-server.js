"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const a="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";let c=(o=21)=>{let e="",i=crypto.getRandomValues(new Uint8Array(o));for(;o--;)e+=a[i[o]&63];return e};var h=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")};const d=1,r=(o,...e)=>o&&console.debug("[DS Debug]:",...e),u={type:"Ping"};class p extends h.EventEmitter{constructor(e=["all"],i=!1){super(),this.clients={},this.debug=i,this.supportedDice=e}open(e){this.server=new h.WebSocketServer(e),this.server.on("connection",t=>{let s=c();for(;this.clients[s];)s=c();this.clients[s]=t,t.isAlive=!0,t.on("message",l=>{r(this.debug,`Message received from ${s}`);try{const n=JSON.parse(l.toString());switch(n.type){case"Pong":{t.isAlive=!0;break}case"RollRequest":{this.emit("onRollRequest",s,n.id,n.rolls);break}case"CancelRollRequest":{this.emit("onCancelRollRequest",s,n.id);break}default:{r(!0,`Unrecognized message type ${n.type} from ${s}`);break}}}catch(n){r(this.debug,n),this.emit("onError",n)}}),t.on("error",l=>{r(this.debug,s,l),this.emit("onError",l,s)}),t.on("close",()=>{r(this.debug,`Closing connection to client ${s}`),delete this.clients[s],this.emit("onConnectionClose",s)}),this._sendRaw(t,{type:"ServerVersion",version:d}),this._sendRaw(t,{type:"SupportedDice",dice:this.supportedDice}),this.emit("onConnection",s,t)});const i=setInterval(()=>{var t;(t=this.server)==null||t.clients.forEach(s=>{s.isAlive?(s.isAlive=!1,this._sendRaw(s,u)):(r(this.debug,"Client didn't respond to ping. Terminating connection."),s.terminate())})},3e4);this.server.on("listening",()=>{r(this.debug,"Web socket server listening")}),this.server.on("close",()=>{r(this.debug,"Web socket server closed"),clearInterval(i),this.clients={},this.emit("onClose")})}close(){var e;(e=this.server)==null||e.close(),this.server=void 0}sendRollResponse(e,i,t){this._sendRaw(e,{type:"RollResponse",id:i,rolls:t})}_sendRaw(e,i){let t;if(typeof e=="string"){if(!this.clients[e]){r(this.debug,`Tried to send message '${i.type}' to client '${e}' that does not exist`);return}t=this.clients[e]}else t=e;t.send(JSON.stringify(i))}setSupportedDice(e){var i;this.supportedDice=e,(i=this.server)==null||i.clients.forEach(t=>{this._sendRaw(t,{type:"SupportedDice",dice:e})})}}exports.DiceServer=p;
